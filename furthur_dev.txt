# Image-Search
Project Structure

Backend: Go, Redis, REST
- Use Claifai API (https://clarifai.com/developer/guide/) to analyze image and get tags via multi thread goroutine method
- Create Revert Index, using tag to search image url
- Store the key-value pair to redis using "Zadd" function, sort the value by ranking Value

Frontend: Node.js, Express.js, Handlebars
- Use "zrevrange" to retrieve top 10 images of the tag

----------------------------------------

Run the program:
under Image_Search_engine/app/
  docker build -t go-app .

under Image_Search_engine/node/
  docker build -t node-web .

under Image_Search_engine/
  docker-compose up

in browser, visit page
  localhost:3000

----------------------------------------

Further development:
1. Improve effectiveness of input words
  Rewrite Keywords, consider synonym and related words
  eg. input : 'animal' -> query ['animal', 'dog', 'cat', 'farm']

  Run text understanding model on synonym text database, using NLP library like work2vector

2. Optimize ranking algorithm, more factors needed to be considered.
  - Consider the uniqueness of the tag
  For instance, when querying "dog", the first image returns ["dog": 0.99, "sky":0.7, "plant":0.6] as dog would be the main theme.
  the second image returns ["dog": 0.99, "sky":0.98, "plant":0.95] as all of dog, sky and plant could be the main theme.
  So, the first image might better fit to the keyword "dog" and should rank higher than the second one.

  - Learn from user profile
  If we have user profile and user click history, we could speculate which image fits better to the user.
  For instance, if we know for male software engineers, they click "cat" images more frequently when searching "pets",
  then for the new query, images having "cat" tag should rank higher for people with same user profile.

3. Batch process vs Stream process
  For now, we're using a batch process method, since all the images are pre-stored.
  But actually, the new images are generated all the time, and there're two ways to run the data process.

  For batch process, we need to store the images temporarily and run image process periodically to add new image tags into revert index database.
  For stream process, we establish a data pipeline to feed the image data continuously, run the data process and add new image tags into revert index database in real time.

  When the real time updates are important, stream process should be adopted. Like traffic monitor
  When the computing power is kind limited and real time updates are not that important, batch process is preferred. Like making library record

4. Challenge of potential large amount of requests
  When the request amount got increased, we need to increase the number of server, and some distributed system techniques should be adopted.
  For instance, we could separate read and write server, could increase the proficiency.
  Also, we could use a load balancer to manage the usage of servers.
  And we could add a controller to monitor amount of user requests and dynamically scale out/in the amount of servers
  so when there're peak of requests the service could keep running well, while saving resources for normal condition.
